<?xml version="1.0" encoding="UTF-8"?>
<test-data>  

	<!-- RETURN -->

    <test-code>
        <description><![CDATA[Legal return tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
public class JavaDocTestClass {
	
	/**
	 * @return Some integer.
	 */
	public int method() { return 42; }
}
     ]]></code>
    </test-code>
    
    <test-code>
        <description><![CDATA[Illegal return tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>3</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
/**
 * @return Illegal class return.
 */
public class JavaDocTestClass {
	
	/**
	 * @return Illegal enum return.
	 */
	public enum Enum {}

	/**
	 * @return Illegal void return.
	 */
	public void method() {}
}
     ]]></code>
    </test-code>
    
    <test-code>
        <description><![CDATA[Missing return tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
public class JavaDocTestClass {
	/**
	 */
	public int method() { return 0; }
}
     ]]></code>
    </test-code>
    
    <test-code>
        <description><![CDATA[Malformed return tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
public class JavaDocTestClass {
	/**
	 * @return
	 */
	public int method() { return 0; }
}
     ]]></code>
    </test-code>

   	<!-- PARAM -->
   	
    <test-code>
        <description><![CDATA[Illegal param tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>3</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
/**
 * Illegal (not a generic type). 
 * @param illegalClassParam Not allowed here.
 */
public class JavaDocTestClass {

	/**
     * Illegal (enum). 
	 * @param illegalEnumParam Not allowed here.
	 */
	public enum Enum {}

	/**
	 * Parameter not found.
	 *
	 * @param noParams Not allowed here.
	 */
	public void method() {}
}
     ]]></code>      
    </test-code>        
              
    <test-code>
        <description><![CDATA[Undocumented parameter.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>6</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
/**
 * Parameter <E> is undocumented
 * Parameter <H> is undocumented
 */
public class JavaDocTestClass <E, H extends Map> {

	/**
	 * Parameter <F> is undocumented
	 * Parameter <F> is undocumented
	 * Parameter f is undocumented
	 * Parameter g is undocumented
	 * @return Returns something.
	 */
	public <F, G> F method(F f, G g) { return null; }	
}
     ]]></code>      
    </test-code>
                          
    <test-code>
        <description><![CDATA[Malformed parameter.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass <E, H extends Map> {

	/**
	 * @param
	 * @param malformed
	 */
	public void method() {}	
}
     ]]></code>      
    </test-code>
             
	<!-- AUTHOR -->
                            
    <test-code>
        <description><![CDATA[Author tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @author The author.
 */
public class JavaDocTestClass {
	
	/**
	 * @author The author.
	 */
	public enum Enum {}
	
	/**
	 * @author The author.
	 */
	public interface Interface {}	
}
     ]]></code>      
    </test-code>
                                           
    <test-code>
        <description><![CDATA[Malformed author tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @author
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                                   
    <test-code>
        <description><![CDATA[Illegal author tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {

	/**
  	 * @author Illegal author.
         */
	public static final int AUTHOR = 10;
	
	/**
  	 * @author Illegal author.
         */
	public void method() {}	
}
     ]]></code>      
    </test-code>
                        
	<!-- VERSION -->
                            
    <test-code>
        <description><![CDATA[Version tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @version Some version.
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                                                
    <test-code>
        <description><![CDATA[Illegal version tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {

	/**
  	 * @version Illegal version.
     */
	public static final int AUTHOR = 10;
	
	/**
  	 * @version Illegal version.
     */
	public void method() {}	
}
     ]]></code>      
    </test-code>
                                 
    <test-code>
        <description><![CDATA[Malformed version tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @version
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                        
	<!-- SINCE -->
                            
    <test-code>
        <description><![CDATA[Since tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @since Some version.
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                           
    <test-code>
        <description><![CDATA[Malformed since tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @since
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                
   	<!-- DEPRECATED -->
   	
    <test-code>
        <description><![CDATA[Deprecated tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
public class JavaDocTestClass {
	/**
	 * @deprecated Replaced by OtherClass.
	 * @return Some integer.
	 */
	public int method() { return 0; }
}
     ]]></code>      
    </test-code>
              
    <test-code>
        <description><![CDATA[Malformed deprecated tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;
public class JavaDocTestClass {
	/**
	 * @deprecated
	 */
	public void method() {}
}
     ]]></code>      
    </test-code>
                                                
	<!-- LINK -->
                            
    <test-code>
        <description><![CDATA[Link tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * {@link Class}
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                           
    <test-code>
        <description><![CDATA[Malformed link tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * {@link}
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                                                       
	<!-- SEE -->
                            
    <test-code>
        <description><![CDATA[See tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @see Class
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                           
    <test-code>
        <description><![CDATA[Malformed see tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @see
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                                                                      
	<!-- VALUE -->
                            
    <test-code>
        <description><![CDATA[Value tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @value Class#field
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                           
    <test-code>
        <description><![CDATA[Malformed value tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @value
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
                                                                                                 
	<!-- THROWS / EXCEPTION -->
                            
    <test-code>
        <description><![CDATA[Throws / exception tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {

	/**
	 * @throws IllegalAccessException
     * @exception InterruptedException
     */
	public void method() throws IllegalAccessException, InterruptedException {}
}
     ]]></code>      
    </test-code>
                                            
    <test-code>
        <description><![CDATA[Throws / exception not actually thrown.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {

	/**
	 * Both exceptions are not in the throws list.
	 * @throws IllegalAccessException
     * @exception InterruptedException
     */
	public void method() {}
}
     ]]></code>      
    </test-code>                    
                                           
    <test-code>
        <description><![CDATA[Malformed throws / exception tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {

    /**
     * @throws
     * @exception
     */
	public void method() {}
}
     ]]></code>      
    </test-code>              
                            
    <test-code>
        <description><![CDATA[Illegal throws / exception tag.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * @throws IllegalAccessException
 * @exception InterruptedException
 */
public class JavaDocTestClass {
}
     ]]></code>      
    </test-code>
    
    <test-code>
        <description><![CDATA[Unresolved exception.]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">true</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {
	/**
 	 * @throws UnresolvedException
 	 */
 	public void method() {}
}
     ]]></code>      
    </test-code>
    
    <!-- CHARACTER COUNT -->
    
    <code-fragment id="class-level-comment"><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * Regular
 * @author The Author
 * comment
 * @version Some version
 * text.
 */
public class JavaDocTestClass {
}
    ]]></code-fragment>
        
    <code-fragment id="method-level-comment"><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

public class JavaDocTestClass {
	/**
	 * Some text
	 * {@link SomeClass Link Text}
	 * mixed
	 * @see SomeClass
	 * with
	 * @throws IllegalAccessException
	 * the
	 * @exception InterruptedException
	 * tags.
	 * @since The beginning of time.
	 * @return Returns a nice value.
	 * @param param The parameter.
	 * @value JavaDocTestClass#field
	 * @deprecated Just for testing.
	 */
	public int method(int param) throws IllegalAccessException, InterruptedException { return 0; }
}
    ]]></code-fragment>
    
    <test-code>
        <description><![CDATA[Character count for class-level tags.]]></description>
     	<rule-property name="minimumContentLength">39</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code-ref id="class-level-comment"/>    
    </test-code>
                      
    <test-code>
        <description><![CDATA[Character count for class-level tags (negative).]]></description>
     	<rule-property name="minimumContentLength">40</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code-ref id="class-level-comment"/>    
    </test-code>
                  
    <test-code>
        <description><![CDATA[Character count for method-level tags.]]></description>
     	<rule-property name="minimumContentLength">185</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>0</expected-problems>
        <code-ref id="method-level-comment"/>    
    </test-code>
                  
    <test-code>
        <description><![CDATA[Character count for method-level tags (negative).]]></description>
     	<rule-property name="minimumContentLength">186</rule-property>
     	<rule-property name="checkReferences">false</rule-property>
        <expected-problems>1</expected-problems>
        <code-ref id="method-level-comment"/>    
    </test-code>

    <!-- REFERENCES / LINKS -->
                               
    <test-code>
        <description><![CDATA[JavaDoc References]]></description>
     	<rule-property name="minimumContentLength">0</rule-property>
     	<rule-property name="checkReferences">true</rule-property>
        <expected-problems>100</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.comments.testclasses;

/**
 * 
 * <p>A link to the {@link JavaDocTestClass test class}.</p>
 * <p>A link to the third overload {@link JavaDocTestClass#overload2(E) method}.</p>
 * <p>A link to a {@link JavaDocTestClass#method1() method}.</p>
 * <p>A link to the overload {@link JavaDocTestClass#overload1 method}.</p>
 * <p>A link to the first overload {@link JavaDocTestClass#overload1(int param1) method}.</p>
 * <p>A link to the second overload {@link JavaDocTestClass#overload1(int, int) method}.</p>
 *
 */
public class JavaDocTestClass {

	/**
	 * <p>A link to the {@link JavaDocTestClass test class}.</p>
	 */
	public void test1() {}
}
     ]]></code>      
    </test-code>

</test-data>
